import jsonimport numpy as npimport astimport matplotlib.pyplot as pltimport pickleimport ternaryimport cPickle, bz2def epinions_time():    methods_label = ["PSL","SL","CSL", "CI-1", "CI-2",  "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-3-rules", "csl-3-rules-conflict-evidence", "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    #1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[:]:        m_data[method] = {}        for graph_sizes in [8518, 1000, 5000, 10000, 47676][1:4]:            with open("../output/test/complete result-4-gz/%s_results-server-%s-0.2-tr.json"%(method,graph_sizes)) as fp:                for line in fp:                    # print line                    if len(line.strip())<20: continue                    try:                        result=ast.literal_eval(line)                    except:                        print method                        print line                        return                    if m_data[method].has_key(result['T']):                        if m_data[method][result['T']].has_key(result['positive_ratio']):                            m_data[method][result['T']][result['positive_ratio']].append(json.dumps(result))                        else:                            m_data[method][result['T']][result['positive_ratio']]=[json.dumps(result)]                    else:                        m_data[method][result['T']]={}                        m_data[method][result['T']][result['positive_ratio']]=[json.dumps(result)]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    for T in [8,9,10,11][2:3]:        for ratio in [0.2,0.3,0.6, 0.7, 0.8][:1]:            for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:                for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6][2:3]:                    for i,method in enumerate(methods[:]):                        temp_run_time={}                        run_time=[]                        for graph_sizes in [1000, 5000, 10000, 47676][:3]:                            temp_run_time[graph_sizes]=[]                            if not m_data[method].has_key(T) or not m_data[method][T].has_key(ratio): continue                            for result in m_data[method][T][ratio]:                                # print result                                result=ast.literal_eval(result)                                if result['network_size']==graph_sizes and result['T']==T and result['test_ratio']==test_ratio and result['positive_ratio']==ratio and result['ratio_conflict']==ratio_conflict:                                    temp_run_time[graph_sizes].append(result['runtime'])                        # print method,temp_prob_mse                        for graph_sizes in sorted(temp_run_time.iterkeys()):                            # print ratio_confl                            run_time.append(np.mean(temp_run_time[graph_sizes]))                        print method,run_timedef traffic_time():    methods_label = ["PSL","sl","csl", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/traffic-43/"+method+"_results-server-traffic-T43-Sep26.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=['b','c','y','g','r','k']    N=2    width=0.17    ref_ratios = [0.8, 0.7, 0.6]    datasets = ['philly', 'dc']    idx=np.arange(N)    for dataset in datasets[:]:        for weekday in range(5)[:1]:            for hour in range(6, 22)[2:3]:                for ref_ratio in ref_ratios[2:]:                    for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:                        for i,method in enumerate(methods[:]):                            runtimes=[]                            temp_runtime={}                            for ratio_conflict in [0,0, 0.1, 0.2, 0.3, 0.4, 0.5,0.6][2:3]:                                temp_runtime[ratio_conflict]=[]                                for result in m_data[method]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['weekday']==weekday and result['hour']==hour and result['ref_ratio']==ref_ratio and result['test_ratio']==test_ratio and result['dataset']==dataset  and result['ratio_conflict']==ratio_conflict :                                        temp_runtime[ratio_conflict].append(result['runtime'])                            # print method,temp_prob_mse                            for ratio_confl in sorted(temp_runtime.iterkeys()):                                runtimes.append(np.mean(temp_runtime[ratio_confl]))                            print dataset,method,runtimesdef mapping(points):    map_points=[]    for e in points:        map_points.append([e[0],e[2],e[1]])    return map_pointsdef mapping2(points):    map_points=[]    freq={}    for e in points:        map_points.append((e[0],e[2],e[1]))        if freq.has_key((e[0],e[2],e[1])):            freq[(e[0],e[2],e[1])]+=1        else:            freq[(e[0], e[2], e[1])] = 1    sum=np.sum(freq.values())    s=[freq[e]*10.0/sum for e in map_points]    # print s    return map_points,sdef simplex_and_bar_plot():    with open("../output/test/results-server-sep27-1000-0.2-tr-ConfRatio-val-abs-T4.pkl") as fp:        results=pickle.load(fp)    # results = cPickle.load(bz2.BZ2File("../output/test/results-server-sep27-1000-0.2-tr-ConfRatio-val-abs-T4.pkl.bz2"))    with open("../output/test/results-server-sep27-1000-psl-0.2-tr-ConfRatio-val-abs-T4.pkl") as fp:        results_psl=pickle.load(fp)    # print results_psl.keys()    # results_psl={}    results.update(results_psl)    methods = ['psl','sl', 'csl', 'csl-3-rules', 'csl-3-rules-conflict-evidence']    methods_label = ["PSL","SL", "CSL", "CI-1", "CI-2"]    kk=2    # for k in sorted(results.keys()):    #     v=results[k]    #     try:    #         print k,len(v[0].keys()),len(v[1].keys())    #     except:    #         print k,v[0],v[1]    m_data = {}    # 1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[:]:        with open("../output/test/complete result-4-gz/" + method + "_results-server-1000-0.2-tr.json") as fp:            m_data[method] = {}            for line in fp:                # print line                if len(line.strip()) < 20: continue                try:                    result = ast.literal_eval(line)                except:                    print method                    print line                    return                if m_data[method].has_key(result['T']):                    if m_data[method][result['T']].has_key(result['positive_ratio']):                        m_data[method][result['T']][result['positive_ratio']].append(json.dumps(result))                    else:                        m_data[method][result['T']][result['positive_ratio']] = [json.dumps(result)]                else:                    m_data[method][result['T']] = {}                    m_data[method][result['T']][result['positive_ratio']] = [json.dumps(result)]    scale = 1.0    for T in [8,9,10,11][2:3]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:  # percentage of edges to test (|E_x|/|E|)            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][:]:                figure = plt.figure(figsize=(18,10))                ax = figure.add_subplot(2, 3, 1)                colors = ['b', 'c', 'y', 'g', 'r', 'k']                N = 1                width = 0.15                graph_sizes = 1000                # T = 10                ratio = 0.2                idx = np.arange(N)                rects = []                for i, method in enumerate(methods[:]):                    prob_mse = []                    prob_std = []                    temp_prob_mse = {}                    # for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                    temp_prob_mse[test_ratio] = []                    if not m_data[method].has_key(T) or not m_data[method][T].has_key(ratio): continue                    for result in m_data[method][T][ratio]:                        # print result                        result = ast.literal_eval(result)                        if result['network_size'] == graph_sizes and result['T'] == T and result[                            'test_ratio'] == test_ratio and result['positive_ratio'] == ratio and result[                            'ratio_conflict'] == ratio_conflict and result['realization'] == 0:                            temp_prob_mse[test_ratio].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for ratio_confl in sorted(temp_prob_mse.iterkeys()):                        # print ratio_confl                        prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                        prob_std.append(np.std(temp_prob_mse[ratio_confl]))                    print method, prob_mse                    rects.append(ax.bar(idx + width * i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE')                ax.set_title('Probability MAE (Epinions Dataset)')                ax.set_xticks(idx + width / 2)                ax.set_xticklabels((''))                ax.set_xlabel('Epinions Dataset')                ax.set_yticks(np.arange(0, 0.61, 0.05))                leg = ax.legend((rects), (methods_label), loc=2)                leg.get_frame().set_alpha(0.5)                ax.grid(color='b', linestyle='-.', linewidth=0.2)                for i,method in enumerate(methods):                    key=method+"-"+str(test_ratio)+"-"+str(ratio_conflict)+"-"+str(T)                    # figure, tax = ternary.figure()                    ax = figure.add_subplot(2,3,i+2)                    tax = ternary.TernaryAxesSubplot(ax=ax,scale=scale)                    # tax.set_title(methods_label[i]+" - TR="+str(test_ratio)+" CR="+str(ratio_conflict)+" Opinion Plot", fontsize=10)                    tax.set_title(                        methods_label[i] + " -  Opinion Plot",                        fontsize=10)                    tax.boundary(linewidth=1.0)                    tax.gridlines(multiple=0.1,linewidth=0.3,color="blue")                    # Plot a few different styles with a legend                    same_marker=True                    if same_marker==True:                        points = mapping(results[key][0].values())                        print method,len(points)#,points                        s=[20.0 for _ in range(len(points))]                        tax.scatter(points, marker='o',s=s,color='red',alpha=1.0, label="GT Opinions")                        points = mapping(results[key][1].values())                        print method,len(points)#,points                        s = [10.0 for _ in range(len(points))]                        tax.scatter(points, marker='o', s=s,color='green',alpha=1.0, label="Predicted Opinions")                    else:                        points,s = mapping2(results[key][0].values())                        tax.scatter(points, marker='o', s=s, color='red', alpha=1.0, label="GT Opinions")                        points,s = mapping2(results[key][1].values())                        print method, len(points)  # ,points                        tax.scatter(points, marker='o', s=s, color='green', alpha=1.0, label="Predicted Opinions")                    tax.left_corner_label("$d_x$",position=(0.025,0.025,0.95))                    tax.right_corner_label("$b_x$",position=(0.95,0.025,0.025))                    tax.top_corner_label("$u_x$",position=(0.025,0.95,0.025))                    tax.left_axis_label("$\longleftarrow$ Disbelieve", fontsize=10)                    tax.right_axis_label("$\longleftarrow$ Uncertainty ", fontsize=10)                    tax.bottom_axis_label("Believe $\longrightarrow$", fontsize=10,offset=-0.1)                    tax.legend()                    tax.ticks(axis='lbr', ticks=[str(i/10.0) for i in range(0,11)],linewidth=1.0, multiple=0.1,tick_formats={i:"%s" for i in ['r','l','b']})                    tax.clear_matplotlib_ticks()                figure.show()                figure.savefig("../output/plots/1000_test-ratio_"+str(test_ratio)+"_conflict-ratio_"+str(ratio_conflict)+"-T"+str(T)+".png")                plt.close("all")            # figure.close()def simplex_and_bar_plot_Bel_Uncer():    # with open("../output/test/results-server-sep27-5000-0.2-tr-ConfRatio-val-abs-T4.pkl") as fp:  #results-server-sep27-5000-0.2-tr-ConfRatio-val-abs-T4.pkl    #     results=pickle.load(fp)    results = cPickle.load(bz2.BZ2File("../output/test/results-server-sep27-5000-0.2-tr-ConfRatio-val-abs-T4.pkl.bz2"))    with open("../output/test/results-server-sep27-5000-psl-0.2-tr-ConfRatio-val-abs-T4.pkl") as fp:        results_psl=pickle.load(fp)    print results_psl.keys()    with open("../output/test/gcn_vae_opinions.pkl") as fp:        results_gcn_vae={"GCN-VAE-0.1-0.2-10":(results_psl["psl-0.1-0.2-10"][0],pickle.load(fp))}    #method+"-"+str(test_ratio)+"-"+str(ratio_conflict)+"-"+str(T)    # results_psl={}    results.update(results_psl)    results.update(results_gcn_vae)    methods = ['psl','sl', 'csl', 'csl-3-rules', 'csl-3-rules-conflict-evidence']    methods_label = ["PSL","SL", "CSL", "CI-1", "CI-2"]    methods = ['GCN-VAE','psl', 'sl', 'csl', 'csl-3-rules-conflict-evidence']    methods_label = ["GCN-VAE","PSL", "SL", "CSL", "CI"]    marker = ['d','^', 'h', 'X', '*']    colors = ['g', 'b', 'c', 'y', 'r', 'k']    scale = 1.0    m_index=["(b)","(c)","(d)","(e)","(f)"]    N = 4    width = 0.15    graph_sizes = 5000    # T = 10    ratio = 0.2    kk=2    # for k in sorted(results.keys()):    #     v=results[k]    #     try:    #         print k,len(v[0].keys()),len(v[1].keys())    #     except:    #         print k,v[0],v[1]    m_data = {}    # 1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[1:]:        with open("../output/test/complete result-4-gz/" + method + "_results-server-5000-0.2-tr.json") as fp:            m_data[method] = {}            for line in fp:                # print line                if len(line.strip()) < 20: continue                try:                    result = ast.literal_eval(line)                except:                    print method                    print line                    return                if m_data[method].has_key(result['T']):                    if m_data[method][result['T']].has_key(result['positive_ratio']):                        m_data[method][result['T']][result['positive_ratio']].append(json.dumps(result))                    else:                        m_data[method][result['T']][result['positive_ratio']] = [json.dumps(result)]                else:                    m_data[method][result['T']] = {}                    m_data[method][result['T']][result['positive_ratio']] = [json.dumps(result)]    for T in [8,9,10,11,21][2:3]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:1]:  # percentage of edges to test (|E_x|/|E|)            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][2:3]:                idx = np.arange(N)                rects = []                figure = plt.figure(figsize=(15,10))                ax = figure.add_subplot(2, 3, 1)                ax.xaxis.set_tick_params(labelsize=12)                ax.yaxis.set_tick_params(labelsize=12)                rects.append(                    ax.bar(idx + width * 0.0, [0.266, 0.268, 0.268, 0.022], width, color=colors[0],                           linewidth=0.5,                           edgecolor='w'))                for i, method in enumerate(methods[1:]):                    i+=1                    prob_mse = []                    prob_std = []                    temp_prob_mse = {}                    for t_mse in ["prob_mse","d_mse","b_mse","u_mse"][:]:                        temp_prob_mse[t_mse] = []                        if not m_data[method].has_key(T) or not m_data[method][T].has_key(ratio): continue                        for result in m_data[method][T][ratio]:                            # print result                            result = ast.literal_eval(result)                            if result['network_size'] == graph_sizes and result['T'] == T and result[                                'test_ratio'] == test_ratio and result['positive_ratio'] == ratio and result[                                'ratio_conflict'] == ratio_conflict and result['realization'] == 0:                                temp_prob_mse[t_mse].append(result[t_mse][0])                        # print method,temp_prob_mse                    # print sorted(temp_prob_mse.iterkeys())                    for t_mse in ["prob_mse","d_mse","b_mse","u_mse"]:                        # print ratio_confl                        prob_mse.append(np.mean(temp_prob_mse[t_mse]))                        prob_std.append(np.std(temp_prob_mse[t_mse]))                    print method, prob_mse                    rects.append(ax.bar(idx + width * i, prob_mse, width, color=colors[i], yerr=prob_std,linewidth=0.5,edgecolor = 'w'))                ax.set_ylabel('MAE', fontsize=16)                ax.set_title('(a) MAE Plot', fontsize=14)                ax.set_xticks(idx + width / 2)                ax.set_xticklabels(('Probability','Disbelief','Belief','Uncertainty'))                # ax.set_xlabel('Epinions Dataset')                ax.set_yticks(np.arange(0, 0.51, 0.05))                leg = ax.legend((rects), (methods_label), loc=1)                leg.get_frame().set_alpha(0.5)                ax.grid(color='b', linestyle='-.', linewidth=0.05)                for i,method in enumerate(methods):                    key=method+"-"+str(test_ratio)+"-"+str(ratio_conflict)+"-"+str(T)                    # figure, tax = ternary.figure()                    ax = figure.add_subplot(2,3,i+2)                    tax = ternary.TernaryAxesSubplot(ax=ax,scale=scale)                    # tax.set_title(methods_label[i]+" - TR="+str(test_ratio)+" CR="+str(ratio_conflict)+" Opinion Plot", fontsize=10)                    tax.set_title(m_index[i]+" "+                        methods_label[i] + " Opinion Plot",                        fontsize=14)                    tax.boundary(linewidth=1.0)                    tax.gridlines(multiple=0.1,linewidth=0.3,color="#8b8989",linestyle='--')                    # Plot a few different styles with a legend                    same_marker=True                    if same_marker==True:                        print key,results[key][0]                        points = mapping(results[key][0].values())                        print method,len(points)#,points                        s=[25.0 for _ in range(len(points))]                        tax.scatter(points, marker='o',s=s,color='w',alpha=1.0, label="Ground Truth",linewidths=1.0,edgecolors='#a020f0')                        points = mapping(results[key][1].values())                        print method,len(points)#,points                        s = [15.0 for _ in range(len(points))]                        tax.scatter(points, marker='o', s=s,color=colors[i],alpha=1.0, label="Predicted",linewidths=0.5,edgecolors='k')                    else:                        points,s = mapping2(results[key][0].values())                        tax.scatter(points, marker='o', s=s, color='#00FF00', alpha=1.0, label="Ground Truth",linewidths=0.3,edgecolors='k')                        points,s = mapping2(results[key][1].values())                        print method, len(points)  # ,points                        tax.scatter(points, marker=marker[i], s=s, color=colors[i], alpha=1.0, label="Predicted",linewidths=0.3,edgecolors='k')                    # tax.left_corner_label("$d_x$",position=(0.05,0.05,0.90))                    # tax.right_corner_label("$b_x$",position=(0.90,0.05,0.05))                    # tax.top_corner_label("$u_x$",position=(0.05,0.90,0.05))                    tax.left_axis_label("$\longleftarrow$ Disbelief", fontsize=14,offset=0.1)                    tax.right_axis_label("$\longleftarrow$ Uncertainty ", fontsize=14,offset=0.1)                    tax.bottom_axis_label("Belief $\longrightarrow$", fontsize=14,offset=-0.05)                    tax.legend(fontsize=10)                    tax.ticks(axis='lbr', ticks=[str(i/10.0) for i in range(0,11)],linewidth=0.5, multiple=0.1,tick_formats={i:"%s" for i in ['r','l','b']})                    tax.clear_matplotlib_ticks()                figure.show()                figure.savefig("../output/plots/5000_test-ratio_"+str(test_ratio)+"_conflict-ratio_"+str(ratio_conflict)+"-T"+str(T)+"-5.png", dpi=500)                # figure.close("all")def simplex_and_bar_plot_traffic():    with open("../output/test/rr0708_results-server-traffic-T43-Sep26-opinion.pkl") as fp: #tr05_results-server-traffic-T43-Sep26-opinion.pkl        results=pickle.load(fp)    # results = cPickle.load(bz2.BZ2File("../output/test/results-server-sep27-5000-0.2-tr-ConfRatio-val-abs-T4.pkl.bz2"))    with open("../output/test/psl_results-server-traffic-T43-Sep26-opinion2.pkl") as fp:        results_psl=pickle.load(fp)    # print results_psl.keys()    # results_psl={}    results.update(results_psl)    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2"]    methods_label = ["PSL","SL", "CSL", "CI-1", "CI-2"]    kk=2    # for k in sorted(results.keys()):    #     v=results[k]    #     try:    #         print k,len(v[0].keys()),len(v[1].keys())    #     except:    #         print k,v[0],v[1]    m_data = {}    # 1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[:]:        with open("../output/test/traffic-43/" + method + "_results-server-traffic-T43-Sep26.json") as fp:            m_data[method] = []            for line in fp:                # print line                if len(line.strip()) < 20: continue                try:                    result = ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    scale = 1.0    for dataset in ["philly","dc"][1:]:        for ref_ratio in [0.6,0.7,0.8][1:]:            for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:  # percentage of edges to test (|E_x|/|E|)                for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:5]:                    figure = plt.figure(figsize=(18,10))                    ax = figure.add_subplot(2, 3, 1)                    colors = ['b', 'c', 'y', 'g', 'r', 'k']                    N = 1                    width = 0.15                    T = 43                    ratio = 0.2                    idx = np.arange(N)                    rects = []                    for i, method in enumerate(methods[:]):                        prob_mse = []                        prob_std = []                        temp_prob_mse = {}                        # for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                        temp_prob_mse[test_ratio] = []                        # if not m_data[method].has_key(T) or not m_data[method][T].has_key(ratio): continue                        for result in m_data[method]:                            result = ast.literal_eval(result)                            # print result,result['ref_ratio']                            if result['dataset'] == dataset and result['test_ratio'] == test_ratio and result[                                'ratio_conflict'] == ratio_conflict and result['realization'] == 0 and result['ref_ratio']==ref_ratio:                                temp_prob_mse[test_ratio].append(result['prob_mse'][0])                        # print method,temp_prob_mse                        for ratio_confl in sorted(temp_prob_mse.iterkeys()):                            # print ratio_confl                            prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                            prob_std.append(np.std(temp_prob_mse[ratio_confl]))                        print method, prob_mse                        rects.append(ax.bar(idx + width * i, prob_mse, width, color=colors[i], yerr=prob_std))                    ax.set_ylabel('Probability MAE')                    ax.set_title('Probability MAE (Epinions Dataset)')                    ax.set_xticks(idx + width / 2)                    ax.set_xticklabels((''))                    ax.set_xlabel('Traffic {} Dataset'.format(dataset))                    ax.set_yticks(np.arange(0, 0.61, 0.05))                    leg = ax.legend((rects), (methods_label), loc=2)                    leg.get_frame().set_alpha(0.5)                    ax.grid(color='b', linestyle='-.', linewidth=0.2)                    for i,method in enumerate(methods):                        key=method+"-"+str(test_ratio)+"-"+str(ratio_conflict)+"-"+dataset                        # figure, tax = ternary.figure()                        ax = figure.add_subplot(2,3,i+2)                        tax = ternary.TernaryAxesSubplot(ax=ax,scale=scale)                        # tax.set_title(methods_label[i]+" - TR="+str(test_ratio)+" CR="+str(ratio_conflict)+" Opinion Plot", fontsize=10)                        tax.set_title(                            methods_label[i] + " -  Opinion Plot",                            fontsize=10)                        tax.boundary(linewidth=1.0)                        tax.gridlines(multiple=0.1,linewidth=0.3,color="blue")                        # Plot a few different styles with a legend                        same_marker=False                        if same_marker==True:                            points = mapping(results[key][0].values())                            print method,len(points)#,points                            s=[5.0 for _ in range(len(points))]                            tax.scatter(points, marker='o',s=s,color='red',alpha=1.0, label="GT Opinions")                            points = mapping(results[key][1].values())                            # print method,len(points)#,points                            tax.scatter(points, marker='o', s=s,color='green',alpha=1.0, label="Predicted Opinions")                        else:                            points,s = mapping2(results[key][0].values())                            tax.scatter(points, marker='o', s=s, color='red', alpha=1.0, label="GT Opinions")                            points,s = mapping2(results[key][1].values())                            print method, len(points)  # ,points                            tax.scatter(points, marker='o', s=s, color='green', alpha=1.0, label="Predicted Opinions")                        tax.left_corner_label("$d_x$",position=(0.025,0.025,0.95))                        tax.right_corner_label("$b_x$",position=(0.95,0.025,0.025))                        tax.top_corner_label("$u_x$",position=(0.025,0.95,0.025))                        tax.left_axis_label("$\longleftarrow$ Disbelieve", fontsize=10)                        tax.right_axis_label("$\longleftarrow$ Uncertainty ", fontsize=10)                        tax.bottom_axis_label("Believe $\longrightarrow$", fontsize=10,offset=-0.1)                        tax.legend()                        tax.ticks(axis='lbr', ticks=[str(i/10.0) for i in range(0,11)],linewidth=1.0, multiple=0.1,tick_formats={i:"%s" for i in ['r','l','b']})                        tax.clear_matplotlib_ticks()                    figure.show()                    figure.savefig("../output/plots/simplex-"+dataset+"_ref-ratio_"+str(ref_ratio)+"-ratio_"+str(test_ratio)+"_conflict-ratio_"+str(ratio_conflict)+"-T"+str(T)+".png")                    # figure.close()def simplex2():    scale = 1.0    # for method in methods:    figure, tax = ternary.figure(scale=scale)    tax.set_title("Scatter Plot", fontsize=20)    tax.boundary(linewidth=2.0)    tax.gridlines(multiple=5, color="blue")    # Plot a few different styles with a legend    points = mapping([(1.0,0,0)])    tax.scatter(points, marker='D', color='red', label="B -Red Squares")    points = mapping([(0,1.0,0)])    tax.scatter(points, marker='D', color='green', label="D- Green Diamonds")    points = mapping([(0.0, 0.0, 1.0)])    tax.scatter(points, marker='D', color='black', label="U- Black Diamonds")    tax.legend()    tax.ticks(axis='lrb', linewidth=1, multiple=1)    tax.left_axis_label("Left label" , fontsize=10)    tax.right_axis_label("Right label" , fontsize=10)    tax.bottom_axis_label("Bottom label ", fontsize=10)    tax.show()def test_new_bar_plot_sybils():    methods_label = ["PSL","sl","csl", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/"+method+"_results-server-traffic-T43-Sep26.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors=['b','c','y','g','r','k']    N=4    width=0.17    ref_ratios = [0.8, 0.7, 0.6]    datasets = ['philly', 'dc']    idx=np.arange(N)    for attack_edge in [1000, 2000, 3000, 4000, 5000,10000,15000,20000][:]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            # for method in methods[:]:            rects=[]            fig, ax = plt.subplots()            for i,method in enumerate(methods[:]):                prob_mse=[]                prob_std=[]                temp_prob_mse={}                for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5,0.6][:]:                    temp_prob_mse[ratio_conflict]=[]                    for result in m_data[method]:                        # print result                        result=ast.literal_eval(result)                        if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['ratio_conflict']==ratio_conflict :                            temp_prob_mse[ratio_conflict].append(result['prob_mse'][0])                # print method,temp_prob_mse                for ratio_confl in sorted(temp_prob_mse.iterkeys()):                    prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                    prob_std.append(np.std(temp_prob_mse[ratio_confl]))                print method,prob_mse,attack_edge,test_ratio                rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))            ax.set_ylabel('Probability MAE')            ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')            ax.set_xticks(idx + width / 2)            ax.set_xticklabels(('0.0', '0.1', '0.2', '0.3', '0.4'))            ax.set_xlabel('Percentage of edges with conflict evidence')            ax.set_yticks(np.arange(0, 0.61, 0.05))            ax.legend((rects), (methods_label),loc= 4)            #plt.show()            fig.savefig("../output/plots/Oct15-"+attack_edge+"-test_ratio-"+str(test_ratio)+".png")            plt.close()            print "--- ref_Ratio:{} Test Ratio:{}".format(attack_edge,test_ratio)def test_line_plot_FB_sybils_varyingAttkEdge():    methods_label = ["GCN-VAE","PSL","SL","CSL", "CI" ]    methods = ["GCN-VAE","psl","sl","csl", "csl-conflict-2"]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[1:]:        with open("../output/test/"+method+"_results-server-sybils-Oct13-num_attkEdge-swap-0.2.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors = ['g', 'b', 'c', 'y', 'r']    marker = ['d', '^', 'h', 'X', '*']    att_edges=[1000, 5000, 10000, 15000, 20000]    N=5    width=0.17    prob_mse0=[0.149,0.156,0.195,0.192,0.24]    idx=np.arange(N)    for swap_ratio in [0.00, 0.01, 0.02, 0.05][1:2]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                # for method in methods[:]:                rects=[]                fig, ax = plt.subplots()                ax.plot(att_edges, prob_mse0, color=colors[0], label=methods_label[0], marker=marker[0],                        markeredgewidth=0.5, markeredgecolor='k')                for i,method in enumerate(methods[1:]):                    i+=1                    prob_mse=[]                    prob_std=[]                    temp_prob_mse={}                    for attack_edge in [1000, 5000, 10000, 15000, 20000][:]:                        temp_prob_mse[attack_edge]=[]                        for result in m_data[method]:                            # print result                            result=ast.literal_eval(result)                            if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['swap_ratio']==swap_ratio and result['ratio_conflict']==ratio_conflict :                                temp_prob_mse[attack_edge].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for attack_edge in sorted(temp_prob_mse.iterkeys()):                        prob_mse.append(np.mean(temp_prob_mse[attack_edge]))                        prob_std.append(np.std(temp_prob_mse[attack_edge]))                    print method,prob_mse,test_ratio,ratio_conflict                    ax.plot(att_edges, prob_mse, color=colors[i], label=methods_label[i], marker=marker[i],markeredgewidth=0.5, markeredgecolor='k')                    # rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE', fontsize=14)                # ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')                ax.set_xticks(att_edges)                ax.set_xticklabels(['1000', '5000', '10000', '15000', '20000'], fontsize=12)                ax.set_xlabel('Number of Attack Edges')                ax.set_yticks(np.arange(0, 0.61, 0.05))                ax.legend((methods_label), loc=2)                # leg.get_frame().set_alpha(0.5)                ax.grid(color='b', linestyle='-.', linewidth=0.05)                #plt.show()                fig.savefig("../output/plots/Dec18-Sybils-line-test_ratio-"+str(test_ratio)+"-swap_ratio-"+str(swap_ratio)+"-conflict_ratio-"+str(ratio_conflict)+"-.png",dpi=360)                plt.close()                print "----FB test_Ratio:{} ratio_conflict:{}".format(test_ratio,ratio_conflict)def test_line_plot_enron_sybils_varyingAttkEdge():    methods_label = ["GCN-VAE", "PSL", "SL", "CSL", "CI"]    methods = ["GCN-VAE", "psl", "sl", "csl", "csl-conflict-2"]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[1:]:        with open("../output/test/"+method+"_results-server-enron-Oct16-num_attkEdge-swap-0.2.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors = ['g', 'b', 'c', 'y', 'r']    marker = ['d', '^', 'h', 'X', '*']    att_edges = [1000, 5000, 10000, 15000, 20000]    N=5    width=0.17    idx=np.arange(N)    prob_mse0=[0.158,0.167,0.188,0.195,0.20]    for swap_ratio in [0.00, 0.01, 0.02, 0.05][1:2]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                # for method in methods[:]:                rects=[]                fig, ax = plt.subplots()                ax.plot(att_edges, prob_mse0, color=colors[0], label=methods_label[0], marker=marker[0],                        markeredgewidth=0.5, markeredgecolor='k')                for i,method in enumerate(methods[1:]):                    i+=1                    prob_mse=[]                    prob_std=[]                    temp_prob_mse={}                    for attack_edge in [1000, 5000, 10000, 15000, 20000][:]:                        temp_prob_mse[attack_edge]=[]                        for result in m_data[method]:                            # print result                            result=ast.literal_eval(result)                            if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['swap_ratio']==swap_ratio and  result['ratio_conflict']==ratio_conflict :                                temp_prob_mse[attack_edge].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for attack_edge in sorted(temp_prob_mse.iterkeys()):                        prob_mse.append(np.mean(temp_prob_mse[attack_edge]))                        prob_std.append(np.std(temp_prob_mse[attack_edge]))                    print method,prob_mse,test_ratio,ratio_conflict                    ax.plot(att_edges, prob_mse, color=colors[i], label=methods_label[i], marker=marker[i],markeredgewidth=0.5, markeredgecolor='k')                    # rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE', fontsize=14)                # ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')                ax.set_xticks(att_edges)                ax.set_xticklabels(['1000', '5000', '10000', '15000', '20000'], fontsize=12)                ax.set_xlabel('Number of Attack Edges')                ax.set_yticks(np.arange(0, 0.61, 0.05))                ax.legend((methods_label), loc=2)                # leg.get_frame().set_alpha(0.5)                ax.grid(color='b', linestyle='-.', linewidth=0.05)                #plt.show()                fig.savefig("../output/plots/Dec18-enron-Sybils-test_ratio-"+str(test_ratio)+"-swap_ratio-"+str(swap_ratio)+"-conflict_ratio-"+str(ratio_conflict)+"-.png",dpi=360)                plt.close()                print "----Enron test_Ratio:{} ratio_conflict:{}".format(test_ratio,ratio_conflict)def test_line_plot_slashdot_sybils_varyingAttkEdge():    methods_label = ["GCN-VAE", "PSL", "SL", "CSL", "CI"]    methods = ["GCN-VAE", "psl", "sl", "csl", "csl-conflict-2"]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[1:]:        with open("../output/test/"+method+"_results-server-slashdot-Oct26-num_attkEdge-proj2-0.2-p1.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors = ['g', 'b', 'c', 'y', 'r']    marker = ['d', '^', 'h', 'X', '*']    att_edges = [1000, 5000, 10000, 15000, 20000]    N=5    width=0.17    idx=np.arange(N)    prob_mse0=[0.180,0.186,0.193,0.196,0.201]    for swap_ratio in [0.00, 0.01, 0.02, 0.05][1:2]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                # for method in methods[:]:                rects=[]                fig, ax = plt.subplots()                ax.plot(att_edges, prob_mse0, color=colors[0], label=methods_label[0], marker=marker[0],                        markeredgewidth=0.5, markeredgecolor='k')                for i,method in enumerate(methods[1:]):                    i+=1                    prob_mse=[]                    prob_std=[]                    temp_prob_mse={}                    for attack_edge in [1000, 5000, 10000, 15000, 20000][:]:                        temp_prob_mse[attack_edge]=[]                        for result in m_data[method]:                            # print result                            result=ast.literal_eval(result)                            if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['swap_ratio']==swap_ratio and  result['ratio_conflict']==ratio_conflict :                                temp_prob_mse[attack_edge].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for attack_edge in sorted(temp_prob_mse.iterkeys()):                        # print attack_edge                        prob_mse.append(np.mean(temp_prob_mse[attack_edge]))                        prob_std.append(np.std(temp_prob_mse[attack_edge]))                    print method,prob_mse,test_ratio,ratio_conflict                    ax.plot(att_edges, prob_mse, color=colors[i], label=methods_label[i], marker=marker[i],markeredgewidth=0.8, markeredgecolor='#8b8989')                    # rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE', fontsize=14)                # ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')                ax.set_xticks(att_edges)                ax.set_xticklabels(['1000', '5000', '10000', '15000', '20000'], fontsize=12)                ax.set_xlabel('Number of Attack Edges')                ax.set_yticks(np.arange(0, 0.61, 0.05))                ax.legend((methods_label), loc=2)                # leg.get_frame().set_alpha(0.5)                ax.grid(color='b', linestyle='-.', linewidth=0.05)                #plt.show()                #plt.show()                fig.savefig("../output/plots/DEc18-slashdot-Sybils-test_ratio-"+str(test_ratio)+"-swap_ratio-"+str(swap_ratio)+"-conflict_ratio-"+str(ratio_conflict)+"-.png",dpi=360)                plt.close()                print "----Enron test_Ratio:{} ratio_conflict:{}".format(test_ratio,ratio_conflict)def test_new_bar_plot_FB_sybils_varyingAttkEdge():    methods_label = ["PSL","sl","csl", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/"+method+"_results-server-sybils-Oct13-num_attkEdge-swap-0.2.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors=['b','c','y','g','r','k']    N=5    width=0.17    idx=np.arange(N)    for swap_ratio in [0.00, 0.01, 0.02, 0.05][1:2]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                # for method in methods[:]:                rects=[]                fig, ax = plt.subplots()                for i,method in enumerate(methods[:]):                    prob_mse=[]                    prob_std=[]                    temp_prob_mse={}                    for attack_edge in [1000, 5000, 10000, 15000, 20000][:]:                        temp_prob_mse[attack_edge]=[]                        for result in m_data[method]:                            # print result                            result=ast.literal_eval(result)                            if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['swap_ratio']==swap_ratio and result['ratio_conflict']==ratio_conflict :                                temp_prob_mse[attack_edge].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for attack_edge in sorted(temp_prob_mse.iterkeys()):                        prob_mse.append(np.mean(temp_prob_mse[attack_edge]))                        prob_std.append(np.std(temp_prob_mse[attack_edge]))                    print method,prob_mse,test_ratio,ratio_conflict                    rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE')                # ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')                ax.set_xticks(idx + width / 2)                ax.set_xticklabels(('1000', '5000', '10000', '15000', '20000'))                ax.set_xlabel('Percentage of edges with conflict evidence')                ax.set_yticks(np.arange(0, 0.61, 0.05))                ax.legend((rects), (methods_label),loc= 2)                ax.grid()                #plt.show()                fig.savefig("../output/plots/Nov12-Sybils-test_ratio-"+str(test_ratio)+"-swap_ratio-"+str(swap_ratio)+"-conflict_ratio-"+str(ratio_conflict)+"-.png")                plt.close()                print "----FB test_Ratio:{} ratio_conflict:{}".format(test_ratio,ratio_conflict)def test_new_bar_plot_enron_sybils_varyingAttkEdge():    methods_label = ["PSL","sl","csl", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/"+method+"_results-server-enron-Oct16-num_attkEdge-swap-0.2.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors=['b','c','y','g','r','k']    N=5    width=0.17    idx=np.arange(N)    for swap_ratio in [0.00, 0.01, 0.02, 0.05][1:2]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                # for method in methods[:]:                rects=[]                fig, ax = plt.subplots()                for i,method in enumerate(methods[:]):                    prob_mse=[]                    prob_std=[]                    temp_prob_mse={}                    for attack_edge in [1000, 5000, 10000, 15000, 20000][:]:                        temp_prob_mse[attack_edge]=[]                        for result in m_data[method]:                            # print result                            result=ast.literal_eval(result)                            if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['swap_ratio']==swap_ratio and  result['ratio_conflict']==ratio_conflict :                                temp_prob_mse[attack_edge].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for attack_edge in sorted(temp_prob_mse.iterkeys()):                        prob_mse.append(np.mean(temp_prob_mse[attack_edge]))                        prob_std.append(np.std(temp_prob_mse[attack_edge]))                    print method,prob_mse,test_ratio,ratio_conflict                    rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE')                ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')                ax.set_xticks(idx + width / 2)                ax.set_xticklabels(('1000', '5000', '10000', '15000', '20000'))                ax.set_xlabel('Percentage of edges with conflict evidence')                ax.set_yticks(np.arange(0, 0.61, 0.05))                ax.legend((rects), (methods_label),loc= 2)                ax.grid()                #plt.show()                fig.savefig("../output/plots/Nov13-enron-Sybils-test_ratio-"+str(test_ratio)+"-swap_ratio-"+str(swap_ratio)+"-conflict_ratio-"+str(ratio_conflict)+"-.png")                plt.close()                print "----Enron test_Ratio:{} ratio_conflict:{}".format(test_ratio,ratio_conflict)def test_new_bar_plot_slashdot_sybils_varyingAttkEdge():    methods_label = ["PSL","sl","csl", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/"+method+"_results-server-slashdot-Oct26-num_attkEdge-proj2-0.2-p1.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    colors=['b','c','y','g','r','k']    N=5    width=0.17    idx=np.arange(N)    for swap_ratio in [0.00, 0.01, 0.02, 0.05][1:2]:        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                # for method in methods[:]:                rects=[]                fig, ax = plt.subplots()                for i,method in enumerate(methods[:]):                    prob_mse=[]                    prob_std=[]                    temp_prob_mse={}                    for attack_edge in [1000, 5000, 10000, 15000, 20000][:]:                        temp_prob_mse[attack_edge]=[]                        for result in m_data[method]:                            # print result                            result=ast.literal_eval(result)                            if result['attack_edge']==attack_edge and result['test_ratio']==test_ratio and result['swap_ratio']==swap_ratio and  result['ratio_conflict']==ratio_conflict :                                temp_prob_mse[attack_edge].append(result['prob_mse'][0])                    # print method,temp_prob_mse                    for attack_edge in sorted(temp_prob_mse.iterkeys()):                        # print attack_edge                        prob_mse.append(np.mean(temp_prob_mse[attack_edge]))                        prob_std.append(np.std(temp_prob_mse[attack_edge]))                    print method,prob_mse,test_ratio,ratio_conflict                    rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                ax.set_ylabel('Probability MAE')                ax.set_title('Comparison on Probability MAE ,#Attack edge='+str(attack_edge)+'\n TestRatio='+str(test_ratio)+')')                ax.set_xticks(idx + width / 2)                ax.set_xticklabels(('1000', '5000', '10000', '15000', '20000'))                ax.set_xlabel('Percentage of edges with conflict evidence')                ax.set_yticks(np.arange(0, 0.61, 0.05))                ax.legend((rects), (methods_label),loc= 2)                ax.grid()                #plt.show()                fig.savefig("../output/plots/Nov13-slashdot-Sybils-test_ratio-"+str(test_ratio)+"-swap_ratio-"+str(swap_ratio)+"-conflict_ratio-"+str(ratio_conflict)+"-.png")                plt.close()                print "----Enron test_Ratio:{} ratio_conflict:{}".format(test_ratio,ratio_conflict)def test_new_bar_plot_traffic():    methods_label = ["PSL","sl","csl", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/traffic-43/"+method+"_results-server-traffic-T43-Dec10.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=['b','c','y','g','r','k']    N=4    width=0.17    ref_ratios = [0.8, 0.7, 0.6]    datasets = ['philly', 'dc']    idx=np.arange(N)    for dataset in datasets[:]:        for weekday in range(5)[:]:            for hour in range(6, 22)[2:3]:                for ref_ratio in ref_ratios[2:]:                    for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:                        # for method in methods[:]:                        rects=[]                        fig, ax = plt.subplots()                        for i,method in enumerate(methods[:]):                            prob_mse=[]                            prob_std=[]                            temp_prob_mse={}                            for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5,0.6][3:4]:                                temp_prob_mse[ratio_conflict]=[]                                for result in m_data[method]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['weekday']==weekday and result['hour']==hour and result['ref_ratio']==ref_ratio and result['test_ratio']==test_ratio and result['dataset']==dataset  and result['ratio_conflict']==ratio_conflict :                                        temp_prob_mse[ratio_conflict].append(result['prob_mse'][0])                            # print method,temp_prob_mse                            for ratio_confl in sorted(temp_prob_mse.iterkeys()):                                prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                                prob_std.append(np.std(temp_prob_mse[ratio_confl]))                            print method,prob_mse,ref_ratio,test_ratio                            rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                        ax.set_ylabel('Probability MAE')                        ax.set_title('Comparison on Probability MAE ,'+dataset+'\n (ref_re='+str(ref_ratio)+' TestRatio='+str(test_ratio)+')')                        ax.set_xticks(idx + width / 2)                        ax.set_xticklabels(('0.0', '0.1', '0.2', '0.3', '0.4'))                        ax.set_xlabel('Percentage of edges with conflict evidence')                        ax.set_yticks(np.arange(0, 0.61, 0.05))                        ax.legend((rects), (methods_label),loc= 4)                        #plt.show()                        fig.savefig("../output/plots/Dec10-"+dataset+"-"+str(weekday)+"-"+str(hour)+"-ref_ratio-"+str(ref_ratio)+"-test_ratio-"+str(test_ratio)+"-T43.png")                        plt.close()                        print "{}---- ref_Ratio:{} Test Ratio:{}".format(dataset,ref_ratio,test_ratio)def test_new_bar_plot_traffic_weekdays():    methods_label = ["GCN-VAE","PSL", "SL", "CSL", "CI"][:]    methods = ["GCN-VAE","psl","sl","csl", "csl-conflict-2"][:]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[1:]:        with open("../output/test/traffic-43/"+method+"_results-server-traffic-T43-Dec10.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors = ['g', 'b', 'c', 'y', 'r', 'k']    N=len(range(8, 22))    width=0.15    ref_ratios = [0.6,0.7,0.8]    datasets = ['philly', 'dc']    prob_mse0=[[0.111,0.120,0.078,0.067,0.074,0.061,0.076,0.087,0.137,0.112,0.0928,0.066,0.068,0.043],               [0.0951,0.110,0.079,0.069,0.072,0.077,0.077,0.082,0.086,0.111,0.092,0.064,0.058,0.042]]    idx=np.arange(N)    for ii,dataset in enumerate(datasets[:]):        for ref_ratio in ref_ratios[:1]:            for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:                for ratio_conflict in [0.0, 0.1, 0.2, 0.3, 0.4][3:4]:                    for weekday in range(5)[:1]:                        # for method in methods[:]:                        rects=[]                        fig, ax = plt.subplots()                        rects.append(                            ax.bar(idx + width * 0.0, prob_mse0[ii], width, color=colors[0], linewidth=0.5, edgecolor='w'))                        for i,method in enumerate(methods[1:]):                            i+=1                            prob_mse=[]                            prob_std=[]                            temp_prob_mse={}                            for hour in range(8, 22)[:]:                                temp_prob_mse[hour]=[]                                for result in m_data[method]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['weekday']==weekday and result['hour']==hour and result['ref_ratio']==ref_ratio and result['test_ratio']==test_ratio and result['dataset']==dataset  and result['ratio_conflict']==ratio_conflict :                                        temp_prob_mse[hour].append(result['prob_mse'][0])                            # print method,temp_prob_mse                            for ratio_confl in sorted(temp_prob_mse.iterkeys()):                                prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                                prob_std.append(np.std(temp_prob_mse[ratio_confl]))                            print method,prob_mse,ref_ratio,test_ratio                            rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i],linewidth=0.5,edgecolor = 'w')) #, yerr=prob_std                        ax.set_ylabel('Probability MAE',fontsize=14)                        # ax.set_title('Comparison on Probability MAE ,'+dataset+"-"+str(weekday)+'\n (RR='+str(ref_ratio)+' TR='+str(test_ratio)+' CR='+str(ratio_conflict)+')')                        ax.set_xticks(idx + width / 2)                        # ax.set_xticklabels(('0.0', '0.1', '0.2', '0.3', '0.4'))                        ax.set_xticklabels([str(i)+":00" for i in range(8, 22)], rotation=45)                        ax.set_xlabel('Daily Hours')                        ax.set_yticks(np.arange(0, 0.56, 0.05))                        leg=ax.legend((rects), (methods_label),loc= 2)                        leg.get_frame().set_alpha(0.8)                        ax.grid(color='b', linestyle='-.', linewidth=0.05)                        #plt.show()                        fig.savefig("../output/plots/Dec19-"+dataset+"-"+str(weekday)+"-ref_ratio-"+str(ref_ratio)+"-test_ratio-"+str(test_ratio)+"-confl_ratio-"+str(ratio_conflict)+"-T43.png",dpi=300)                        plt.close()                        print "{}---- ref_Ratio:{} Test Ratio:{}".format(dataset,ref_ratio,test_ratio)def test_new_bar_plot_traffic_dataset():    methods_label = ["PSL","SL","CSL", "CI-1", "CI-2", "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-conflict-1", "csl-conflict-2",  "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        with open("../output/test/traffic-2/"+method+"_results-server-traffic-T11-Sep03.json") as fp:            m_data[method]=[]            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                m_data[method].append(json.dumps(result))    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=['b','c','y','g','r','k']    N=2    width=0.05    ref_ratios = [0.8, 0.7, 0.6]    datasets = ['philly', 'dc']    idx=np.arange(N)    for weekday in range(5)[:1]:        for hour in range(6, 22)[2:3]:            for ref_ratio in ref_ratios[2:]:                for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][1:2]:                    # for method in methods[:]:                    for ratio_conflict in [ 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6][2:3]:                        rects=[]                        fig, ax = plt.subplots()                        for i,method in enumerate(methods[:]):                            prob_mse=[]                            prob_std=[]                            temp_prob_mse={}                            for dataset in datasets[:]:                                temp_prob_mse[dataset]=[]                                for result in m_data[method]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['weekday']==weekday and result['hour']==hour and result['ref_ratio']==ref_ratio and result['test_ratio']==test_ratio and result['dataset']==dataset  and result['ratio_conflict']==ratio_conflict :                                        temp_prob_mse[dataset].append(result['prob_mse'][0])                            # print method,temp_prob_mse                            for dataset in sorted(temp_prob_mse.iterkeys()):                                # print ratio_confl                                prob_mse.append(np.mean(temp_prob_mse[dataset]))                                prob_std.append(np.std(temp_prob_mse[dataset]))                            print method,prob_mse                            rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i],linewidth=0.5,edgecolor = 'w'))                        ax.set_ylabel('Probability MAE')                        ax.set_title('Comparison on Probability MAE ,Conflict Ratio='+str(ratio_conflict)+'\n Reference Ratio='+str(ref_ratio)+' Test Ratio='+str(test_ratio))                        ax.set_xticks(idx + width / 2)                        ax.set_xticklabels(('Philly', 'DC'))                        ax.set_xlabel('Percentage of edges with conflict evidence')                        ax.set_yticks(np.arange(0, 0.61, 0.05))                        ax.legend((rects), (methods_label),loc=2)                        #plt.show()                        fig.savefig("../output/plots/aaaSep6-Conflict_Ratio-"+str(ratio_conflict)+"-ref_ratio-"+str(ref_ratio)+"-test_ratio-"+str(test_ratio)+"-T11.png")                        plt.close()                        print "---- ref_Ratio:{} Test Ratio:{}".format(ref_ratio,test_ratio)def SL_SingleMulti_new_bar_plot():    methods_label = ["SL-Single","TW-sum","SL-Multi"][:]    methods = ["single","TW-sum","TW-sum-multi"][:]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors = ['b', 'c', 'y', 'g', 'r', 'k']    N=7    width=0.15    abs_diff=[]    idx=np.arange(N)    for graph_sizes in [1000, 5000,10000, 47676][1:2]:        m_data = {}        for method in methods[:]:            with open("../output/test/sl_results-server-July7-" + method + "-"+str(graph_sizes)+".json") as fp:                m_data[method] = {}                for line in fp:                    # print line                    if len(line.strip()) < 20: continue                    try:                        result = ast.literal_eval(line)                    except:                        print method                        print line                        return                    if m_data[method].has_key(result['T']):                        if m_data[method][result['T']].has_key(result['positive_ratio']):                            m_data[method][result['T']][result['positive_ratio']].append(json.dumps(result))                        else:                            m_data[method][result['T']][result['positive_ratio']] = [json.dumps(result)]                    else:                        m_data[method][result['T']] = {}                        m_data[method][result['T']][result['positive_ratio']] = [json.dumps(result)]        for T in [8,9,10,11][:]:            for ratio in [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8][5:]:                for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                    rects=[]                    fig, ax = plt.subplots()                    res=[]                    for i,method in enumerate(methods[:]):                        prob_mse=[]                        prob_std=[]                        temp_prob_mse={}                        for ratio_conflict in [0,0, 0.1, 0.2, 0.3, 0.4, 0.5,0.6][:]:                            temp_prob_mse[ratio_conflict]=[]                            if not m_data[method].has_key(T) or not m_data[method][T].has_key(ratio): continue                            for result in m_data[method][T][ratio]:                                # print result                                result=ast.literal_eval(result)                                if result['network_size']==graph_sizes and result['T']==T and result['test_ratio']==test_ratio and result['positive_ratio']==ratio and result['ratio_conflict']==ratio_conflict:                                    temp_prob_mse[ratio_conflict].append(result['prob_mse'][0])                        # print method,temp_prob_mse                        for ratio_confl in sorted(temp_prob_mse.iterkeys()):                            # print ratio_confl                            prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                            prob_std.append(np.std(temp_prob_mse[ratio_confl]))                        print method,prob_mse                        res.append(prob_mse)                    # for i in range(len(res[0])):                    #     abs_diff.append(np.abs(res[0][i]-res[1][i]))    # print min(abs_diff),max(abs_diff)    # plt.hist(abs_diff, bins=20)    # plt.title("Histogram of Absolute difference of MAE resutls")    # plt.show()                        rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                    ax.set_ylabel('Probability MAE')                    ax.set_title('Comparison on Probability MAE ,Graph-size='+str(graph_sizes)+'\n (SnapShots='+str(T)+' TestRatio='+str(test_ratio)+' PosRatio='+str(ratio)+')')                    ax.set_xticks(idx + width / 2)                    ax.set_xticklabels(('0.0', '0.1', '0.2', '0.3', '0.4', '0.5','0.6'))                    ax.set_xlabel('Percentage of edges with conflict evidence')                    ax.set_yticks(np.arange(0, 0.61, 0.05))                    leg=ax.legend((rects), (methods_label),loc= 4)                    leg.get_frame().set_alpha(0.5)                    #plt.show()                    fig.savefig("../output/plots/SL-Aug18-graphSize-"+str(graph_sizes)+"-SnapShots-"+str(T)+"-PosRatio-"+str(ratio)+"-test_ratio-"+str(test_ratio)+".png")                    plt.close()def traffic_line_plot():    methods_label = ["PSL","SL","CSL", "Adv-CSL"][1:]    methods = ["PSL","SL","CSL", "Adv-CSL"][1:]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    for method in methods[:]:        m_data[method] = {}        for adv_type in ["random_flip","random_noise","random_pgd"]:            with open("../output/traffic/"+method+"_results-server-traffic-Jan6-"+adv_type+".json") as fp:                for line in fp:                    # print line                    if len(line.strip())<20: continue                    try:                        result=ast.literal_eval(line)                    except:                        print method                        print line                        return                    if m_data[method].has_key(result['dataset']):                        if m_data[method][result['dataset']].has_key(result['adv_type']):                            m_data[method][result['dataset']][result['adv_type']].append(json.dumps(result))                        else:                            m_data[method][result['dataset']][result['adv_type']]=[json.dumps(result)]                    else:                        m_data[method][result['dataset']]={}                        m_data[method][result['dataset']][result['adv_type']]=[json.dumps(result)]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22",              "#17becf"]    marker = ['d', '^', 'h', 'X', '*']    N = 11    width = 0.15    gammas = [0.0, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.20, 0.25][:]    ref_ratios = [0.8, 0.7, 0.6]    datasets = ['philly', 'dc']    idx=np.arange(N)    for dataset in datasets:        for adv_type in ["random_flip", "random_noise", "random_pgd"][:]:            for weekday in range(5)[:1]:                for hour in range(8, 22)[:1]:                    for ref_ratio in ref_ratios[2:]:                        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                            rects=[]                            fig, ax = plt.subplots()                            for i,method in enumerate(methods[:]):                                prob_mse=[]                                prob_std=[]                                temp_prob_mse={}                                for gamma in gammas[:]:                                    temp_prob_mse[gamma]=[]                                    for result in m_data[method][dataset][adv_type]:                                        result=ast.literal_eval(result)                                        # print result                                        if result['weekday']==weekday and result['hour']==hour and result['ref_ratio']==ref_ratio and result['test_ratio']==test_ratio and result['dataset']==dataset  and result['gamma']==gamma :                                            temp_prob_mse[gamma].append(result['prob_mse'][0])                                # print method,temp_prob_mse                                for gamma in sorted(temp_prob_mse.iterkeys()):                                    # print ratio_confl                                    prob_mse.append(np.mean(temp_prob_mse[gamma]))                                    prob_std.append(np.std(temp_prob_mse[gamma]))                                print method,prob_mse                                # rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i],linewidth=0.5,edgecolor = 'w'))                                ax.plot(idx, prob_mse, color=colors[i], label=methods_label[i], marker=marker[i],                                        markeredgewidth=0.5, markeredgecolor='k')                            ax.set_ylabel('Probability MAE')                            ax.set_title(dataset+' Adv_Type-'+adv_type+' RefRatio='+str(ref_ratio)+' TR='+str(test_ratio))                            ax.set_xticks(idx)                            ax.set_xticklabels([str(gamma) for gamma in gammas])                            ax.set_xlabel('$\gamma$')                            ax.set_yticks(np.arange(0, 0.61, 0.05))                            # leg=ax.legend((rects), (methods_label),loc= 4)                            ax.legend((methods_label), loc=4)                            # leg.get_frame().set_alpha(0.5)                            ax.grid(color='b', linestyle='-.', linewidth=0.2)                            #plt.show()                            fig.savefig("../output/plots/traffic/Jan7-"+dataset+"-Adv_Type-"+adv_type+"-RR-"+str(ref_ratio)+"-TR-"+str(test_ratio)+".png")                            plt.close()                            print "---- ref_Ratio:{} Test Ratio:{}".format(ref_ratio,test_ratio)def epinion_bar_plot():    methods_label = ["PSL","SL","CSL", "Adv-CSL"][1:]    methods = ["PSL","SL","CSL", "Adv-CSL"][1:]    m_data={}    #1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[:]:        m_data[method] = {}        for adv_type in ["random_flip","random_noise","random_pgd"]:            with open("../output/epinions/"+method+"_results-server-5000-Jan3-"+adv_type+".json") as fp:                for line in fp:                    # print line                    if len(line.strip())<20: continue                    try:                        result=ast.literal_eval(line)                    except:                        print method                        print line                        return                    if m_data[method].has_key(result['T']):                        if m_data[method][result['T']].has_key(result['adv_type']):                            m_data[method][result['T']][result['adv_type']].append(json.dumps(result))                        else:                            m_data[method][result['T']][result['adv_type']]=[json.dumps(result)]                    else:                        m_data[method][result['T']]={}                        m_data[method][result['T']][result['adv_type']]=[json.dumps(result)]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"]    N=8    width=0.15    idx=np.arange(N)    for adv_type in ["random_flip","random_noise","random_pgd"]:        for graph_sizes in [5000][:]:            for T in [8,9,10,11][:]:                for ratio in [0.2][:1]:  #0.3,0.6, 0.7, 0.8                    for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                        rects=[]                        fig, ax = plt.subplots()                        for i,method in enumerate(methods[:]):                            prob_mse=[]                            prob_std=[]                            temp_prob_mse={}                            for gamma in [0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07][:]:  # 8                                temp_prob_mse[gamma]=[]                                if not m_data[method].has_key(T) or not m_data[method][T].has_key(adv_type): continue                                for result in m_data[method][T][adv_type]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['network_size']==graph_sizes and result['T']==T and result['test_ratio']==test_ratio and result['positive_ratio']==ratio and result['adv_type']==adv_type and result['gamma']==gamma:                                        temp_prob_mse[gamma].append(result['acc'][0])                            # print method,temp_prob_mse                            for gamma in sorted(temp_prob_mse.iterkeys()):                                # print gamma,temp_prob_mse[gamma]                                prob_mse.append(np.mean(temp_prob_mse[gamma]))                                prob_std.append(np.std(temp_prob_mse[gamma]))                            print method,prob_mse                            rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                        ax.set_ylabel('Probability MAE')                        ax.set_title('Comparison on Probability MAE , Adv-Type:'+adv_type+'\nT='+str(T)+' TR='+str(test_ratio)+' PR='+str(ratio)+')')                        ax.set_xticks(idx + width / 2)                        ax.set_xticklabels(('0.0', '0.01', '0.02', '0.03', '0.04','0.05','0.06','0.07'))                        ax.set_xlabel('$\gamma$')                        ax.set_yticks(np.arange(0, 0.61, 0.05))                        leg=ax.legend((rects), (methods_label),loc= 4)                        leg.get_frame().set_alpha(0.5)                        ax.grid(color='b', linestyle='-.', linewidth=0.2)                        #plt.show()                        fig.savefig("../output/plots/epinions/3methods-Adv-Type-"+adv_type+"-size-"+str(graph_sizes)+"-T-"+str(T)+"-PR-"+str(ratio)+"-TR-"+str(test_ratio)+".png")                        plt.close()def epinion_line_plot():    methods_label = ["PSL","SL","CSL", "Adv-CSL","NAT-CSL"][1:4]    methods = ["PSL","SL","CSL", "Adv-CSL","NAT-CSL"][1:4]    m_data={}    #1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[:]:        m_data[method] = {}        for adv_type in ["random_flip","random_noise","random_pgd"][2:]:            with open("../output/epinions/"+method+"_results-server-5000-Jan5-"+adv_type+".json") as fp:                for line in fp:                    # print line                    if len(line.strip())<20: continue                    try:                        result=ast.literal_eval(line)                    except:                        print method                        print line                        return                    if m_data[method].has_key(result['T']):                        if m_data[method][result['T']].has_key(result['adv_type']):                            m_data[method][result['T']][result['adv_type']].append(json.dumps(result))                        else:                            m_data[method][result['T']][result['adv_type']]=[json.dumps(result)]                    else:                        m_data[method][result['T']]={}                        m_data[method][result['T']][result['adv_type']]=[json.dumps(result)]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"]    marker = ['d', '^', 'h', 'X', '*']    N=11    width=0.15    gammas=[0.0, 0.01, 0.03, 0.05, 0.07,0.09,0.11,0.13,0.15,0.20,0.25][:]    idx=np.arange(N)    for adv_type in ["random_flip","random_noise","random_pgd"][2:]:        for graph_sizes in [5000][:]:            for T in [8,9,10,11][2:3]:                for ratio in [0.2][:1]:  #0.3,0.6, 0.7, 0.8                    for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                        rects=[]                        fig, ax = plt.subplots()                        for i,method in enumerate(methods[:]):                            prob_mse=[]                            prob_std=[]                            temp_prob_mse={}                            for gamma in gammas[:]:  # 8                                temp_prob_mse[gamma]=[]                                if not m_data[method].has_key(T) or not m_data[method][T].has_key(adv_type): continue                                for result in m_data[method][T][adv_type]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['network_size']==graph_sizes and result['T']==T and result['test_ratio']==test_ratio and result['positive_ratio']==ratio and result['adv_type']==adv_type and result['gamma']==gamma:                                        temp_prob_mse[gamma].append(result['prob_mse'][0])                            # print method,temp_prob_mse                            for gamma in sorted(temp_prob_mse.iterkeys()):                                # print gamma,temp_prob_mse[gamma]                                prob_mse.append(np.mean(temp_prob_mse[gamma]))                                prob_std.append(np.std(temp_prob_mse[gamma]))                            print method,prob_mse                            # rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                            ax.plot(idx, prob_mse, color=colors[i], label=methods_label[i], marker=marker[i],                                    markeredgewidth=0.5, markeredgecolor='k')                        ax.set_ylabel('Probability MAE')                        ax.set_title('Adv-Type:'+adv_type+'T='+str(T)+' TR='+str(test_ratio)+' PR='+str(ratio)+')')                        ax.set_xticks(idx)                        ax.set_xticklabels([str(gamma) for gamma in gammas])                        ax.set_xlabel('$\gamma$')                        ax.set_yticks(np.arange(0, 0.61, 0.05))                        # leg=ax.legend((rects), (methods_label),loc= 4)                        ax.legend((methods_label), loc=4)                        # leg.get_frame().set_alpha(0.5)                        ax.grid(color='b', linestyle='-.', linewidth=0.2)                        #plt.show()                        fig.savefig("../output/plots/epinions/3methods-Jan5-line-Adv-Type-"+adv_type+"-size-"+str(graph_sizes)+"-T-"+str(T)+"-PR-"+str(ratio)+"-TR-"+str(test_ratio)+".png")                        plt.close()def epinion_attack_type_line_plot():    methods_label = ["PSL","SL","CSL", "Adv-CSL"][1:]    methods = ["PSL","SL","CSL", "Adv-CSL"][1:]    attack_types=["random_flip", "random_noise", "random_pgd"]    m_data={}    #1000 June5  5000 June7-5000 10000 June14-10000   /complete result-1   -Aug30-47676-0.2-opt    for method in methods[:]:        m_data[method] = {}        for adv_type in ["random_flip","random_noise","random_pgd"]:            with open("../output/epinions/"+method+"_results-server-5000-Jan3-"+adv_type+".json") as fp:                for line in fp:                    # print line                    if len(line.strip())<20: continue                    try:                        result=ast.literal_eval(line)                    except:                        print method                        print line                        return                    if m_data[method].has_key(result['T']):                        if m_data[method][result['T']].has_key(result['adv_type']):                            m_data[method][result['T']][result['adv_type']].append(json.dumps(result))                        else:                            m_data[method][result['T']][result['adv_type']]=[json.dumps(result)]                    else:                        m_data[method][result['T']]={}                        m_data[method][result['T']][result['adv_type']]=[json.dumps(result)]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"]    marker = ['d', '^', 'h', 'X', '*']    N=12    width=0.15    gammas=[0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07,0.09,0.11,0.13,0.15]    idx=np.arange(N)    for i, method in enumerate(methods[:]):        for graph_sizes in [5000][:]:            for T in [8,9,10,11][2:3]:                for ratio in [0.2][:1]:  #0.3,0.6, 0.7, 0.8                    for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                        rects=[]                        fig, ax = plt.subplots()                        for i,adv_type in enumerate(attack_types):                            prob_mse=[]                            prob_std=[]                            temp_prob_mse={}                            for gamma in gammas[:]:  # 8                                temp_prob_mse[gamma]=[]                                if not m_data[method].has_key(T) or not m_data[method][T].has_key(adv_type): continue                                for result in m_data[method][T][adv_type]:                                    # print result                                    result=ast.literal_eval(result)                                    if result['network_size']==graph_sizes and result['T']==T and result['test_ratio']==test_ratio and result['positive_ratio']==ratio and result['adv_type']==adv_type and result['gamma']==gamma:                                        temp_prob_mse[gamma].append(result['prob_mse'][0])                            # print method,temp_prob_mse                            for gamma in sorted(temp_prob_mse.iterkeys()):                                # print gamma,temp_prob_mse[gamma]                                prob_mse.append(np.mean(temp_prob_mse[gamma]))                                prob_std.append(np.std(temp_prob_mse[gamma]))                            print method,prob_mse                            # rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                            ax.plot(idx, prob_mse, color=colors[i], label=attack_types[i], marker=marker[i],                                    markeredgewidth=0.5, markeredgecolor='k')                        ax.set_ylabel('Probability MAE')                        ax.set_title('Probability MAE , Method:'+method+'\nT='+str(T)+' TR='+str(test_ratio)+' PR='+str(ratio)+')')                        ax.set_xticks(idx)                        ax.set_xticklabels([str(gamma) for gamma in gammas])                        ax.set_xlabel('$\gamma$')                        ax.set_yticks(np.arange(0, 0.61, 0.05))                        # leg=ax.legend((rects), (methods_label),loc= 4)                        ax.legend((attack_types), loc=4)                        # leg.get_frame().set_alpha(0.5)                        ax.grid(color='b', linestyle='-.', linewidth=0.2)                        #plt.show()                        fig.savefig("../output/plots/epinions/"+method+"-line-size-"+str(graph_sizes)+"-T-"+str(T)+"-PR-"+str(ratio)+"-TR-"+str(test_ratio)+".png")                        plt.close()def test_testratio_bar_plot():    methods_label = ["PSL","SL","CSL", "CI-1", "CI-2",  "base1", "base2", "base3"][:5]    methods = ["psl","sl","csl", "csl-3-rules", "csl-3-rules-conflict-evidence", "base1", "base2", "base3"][:5]    # methods_label = ["CSL","CI","SL"][:]    # methods = ["csl", "csl-3-rules-conflict-evidence", "sl"][:]    m_data={}    #1000 June5  5000 June7-5000 10000 June14-100000   /complete result-1    for method in methods[:]:        with open("../output/test/complete result-1/"+method+"_results-server-June7-5000.json") as fp:            m_data[method]={}            for line in fp:                # print line                if len(line.strip())<20: continue                try:                    result=ast.literal_eval(line)                except:                    print method                    print line                    return                if m_data[method].has_key(result['T']):                    if m_data[method][result['T']].has_key(result['positive_ratio']):                        m_data[method][result['T']][result['positive_ratio']].append(json.dumps(result))                    else:                        m_data[method][result['T']][result['positive_ratio']]=[json.dumps(result)]                else:                    m_data[method][result['T']]={}                    m_data[method][result['T']][result['positive_ratio']]=[json.dumps(result)]    #{"b_mse": [0.19, 0.19], "prob_mse": [0.236, 0.0], "test_ratio": 0.5, "T": 8, "acc": [0.741, 0.0], "network_size": 1000, "alpha_mse": [1.89, 0.0], "positive_ratio": 0.05, "d_mse": [0.22139112903225805, 0.22139112903225805], "sample_size": 1, "realization": 2, "beta_mse": [1.8932258064516125, 0.0], "runtime": 9.420, "u_mse": [0.0, 0.0]}    # print m_data["csl-3-rules-conflict-evidence"]    #plot parameters    colors=['b','c','y','g','r','k']    N=5    width=0.15    idx=np.arange(N)    for graph_sizes in [8518,1000, 5000,10000, 47676][3:4]:        for T in [5,6,8,9,10,11][2:]:            for ratio in [0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8][6:]:                for ratio_conflict in [0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6][:]:                    rects=[]                    fig, ax = plt.subplots()                    for i,method in enumerate(methods[:]):                        prob_mse=[]                        prob_std=[]                        temp_prob_mse={}                        for test_ratio in [0.1, 0.2, 0.3, 0.4, 0.5][:]:                            temp_prob_mse[test_ratio]=[]                            if not m_data[method].has_key(T) or not m_data[method][T].has_key(ratio): continue                            for result in m_data[method][T][ratio]:                                # print result                                result=ast.literal_eval(result)                                if result['network_size']==graph_sizes and result['T']==T and result['test_ratio']==test_ratio and result['positive_ratio']==ratio and result['ratio_conflict']==ratio_conflict:                                    temp_prob_mse[test_ratio].append(result['prob_mse'][0])                        # print method,temp_prob_mse                        for ratio_confl in sorted(temp_prob_mse.iterkeys()):                            # print ratio_confl                            prob_mse.append(np.mean(temp_prob_mse[ratio_confl]))                            prob_std.append(np.std(temp_prob_mse[ratio_confl]))                        print method,prob_mse                        rects.append(ax.bar(idx + width*i, prob_mse, width, color=colors[i], yerr=prob_std))                    ax.set_ylabel('Probability MAE')                    ax.set_title('Comparison on Probability MAE ,Graph-size='+str(graph_sizes)+'\n (SnapShots='+str(T)+' Conflict Ratio='+str(ratio_conflict)+' PosRatio='+str(ratio)+')')                    ax.set_xticks(idx + width / 2)                    ax.set_xticklabels(('0.1', '0.2', '0.3', '0.4', '0.5'))                    ax.set_xlabel('Percentage of edges with conflict evidence')                    ax.set_yticks(np.arange(0, 0.61, 0.05))                    leg=ax.legend((rects), (methods_label),loc= 4)                    leg.get_frame().set_alpha(0.5)                    ax.grid(color='b', linestyle='-.', linewidth=0.2)                    #plt.show()                    fig.savefig("../output/plots/Aug22-5methods-graphSize-"+str(graph_sizes)+"-SnapShots-"+str(T)+"-PosRatio-"+str(ratio)+"-Conflict Ratio-"+str(ratio_conflict)+".png")                    plt.close()if __name__=='__main__':    print    # epinions_time()    # traffic_time()    # simplex_and_bar_plot()    # simplex_and_bar_plot_Bel_Uncer()    # test_line_plot_FB_sybils_varyingAttkEdge()    # test_line_plot_enron_sybils_varyingAttkEdge()    # test_line_plot_slashdot_sybils_varyingAttkEdge()    # test_new_bar_plot_FB_sybils_varyingAttkEdge()    # test_new_bar_plot_enron_sybils_varyingAttkEdge()    # test_new_bar_plot_slashdot_sybils_varyingAttkEdge()    # simplex_and_bar_plot_traffic()    # plot_runtime_epinions()    # SL_SingleMulti_new_bar_plot()    # epinion_attack_type_line_plot()    # test_testratio_bar_plot()    # test_new_bar_plot_traffic()    # test_new_bar_plot_traffic_weekdays()    # # test_new_bar_plot_traffic_dataset()    # SL_test_new_bar_plot()    # test_time()    ################################    # epinion_bar_plot()    # epinion_line_plot()    traffic_line_plot()